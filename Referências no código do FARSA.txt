    -comandos de configuração do MarXbot:
        -farsa-1.4.4/experiments/src/robots.cpp  linha 118
        -total99/svn/farsa-code/farsa/experiments/src/robots.cpp linha 118 (é uma copia do arquivo anterior, com algumas alterações)
         -Vale a pena dar uma lida nas funções definidas nesse arquivo;
            MarXbot::MarXbot(ConfigurationParameters& params, QString prefix) :
                RobotOnPlane(params, prefix),
                PhyMarXbot(extractWorld(params), extractRobotName(params, prefix, "marXbot"), extractRobotTranformation(params, prefix))
            {
                doKinematicSimulation(ConfigurationHelper::getBool(params, prefix + "kinematicRobot", false));

                const bool enableWheels = ConfigurationHelper::getBool(params, prefix + "enableWheels", true);
                const bool enableProximityIR = ConfigurationHelper::getBool(params, prefix + "enableProximityIR", false);
                const bool enableGroundBottomIR = ConfigurationHelper::getBool(params, prefix + "enableGroundBottomIR", false);
                const bool enableGroundAroundIR = ConfigurationHelper::getBool(params, prefix + "enableGroundAroundIR", false);
                const bool enableAttachDev = ConfigurationHelper::getBool(params, prefix + "enableAttachmentDevice", false);
                const bool drawProximityIR = ConfigurationHelper::getBool(params, prefix + "drawProximityIR", false);
                const bool drawGroundBottomIR = ConfigurationHelper::getBool(params, prefix + "drawGroundBottomIR", false);
                const bool drawGroundAroundIR = ConfigurationHelper::getBool(params, prefix + "drawGroundAroundIR", false);
                const bool drawIRRays =ConfigurationHelper::getBool(params, prefix + "drawIRRays", false);
                const bool drawIRRaysRange = ConfigurationHelper::getBool(params, prefix + "drawIRRaysRange", false);

                wheelsController()->setEnabled(enableWheels);
                proximityIRSensorController()->setEnabled(enableProximityIR);
                setProximityIRSensorsGraphicalProperties(drawProximityIR, drawIRRays, drawIRRaysRange);
                groundBottomIRSensorController()->setEnabled(enableGroundBottomIR);
                setGroundBottomIRSensorsGraphicalProperties(drawGroundBottomIR, drawIRRays, drawIRRaysRange);
                groundAroundIRSensorController()->setEnabled(enableGroundAroundIR);
                setGroundAroundIRSensorsGraphicalProperties(drawGroundAroundIR, drawIRRays, drawIRRaysRange);
                enableAttachmentDevice(enableAttachDev);

                QString ledColorsString = ConfigurationHelper::getString(params, prefix + "ledColors", "").replace("+", "#");
                if (!ledColorsString.isEmpty()) {
                    // Converting all colors
                    QList<QColor> ledColors;
                    QStringList c = ledColorsString.split(" ", QString::SkipEmptyParts);
                    if (c.size() != 12) {
                        ConfigurationHelper::throwUserConfigError(prefix + "ledColors", params.getValue(prefix + "ledColors"), "The ledColors parameter must be a list of exactly 12 elements");
                    }
                    for (int i = 0; i < c.size(); ++i) {
                        const QColor curColor(c[i]);
                        if (!curColor.isValid()) {
                            ConfigurationHelper::throwUserConfigError(prefix + "ledColors", params.getValue(prefix + "ledColors"), QString("The value of the %1th color is not a valid color").arg(i));
                        }
                        ledColors << curColor;
                    }
                    // Finally setting the led colors
                    setLedColors(ledColors);
                }

                // Setting the color of the robot
                setColor(configuredRobotColor());
            }
        -Função 
